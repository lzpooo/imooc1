package com.briup.server;

import java.io.InputStream;
import java.io.ObjectInputStream;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.Collection;
import java.util.Properties;




import com.briup.util.BIDR;
import com.briup.woss.server.Server;
/**
 * 中央服务器
 */
public class ServerImpl implements Server{
	Collection<BIDR> bidr=null;
	
	@Override
	public void init(Properties arg0) {
		
	}

	@SuppressWarnings("resource")
	@Override
	public Collection<BIDR> revicer() throws Exception {
		boolean flag=true;
		ServerSocket ss=null;
		Socket client=null;
		try {
			ss=new ServerSocket(9898);
			System.out.println("等待连接...");
			while(flag){
				client=ss.accept();
				new ServerThread(client).start();			
			}
			
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		return bidr;
	}
	
	/*@Test
	public void testtt(){
		ServerImpl si=new ServerImpl();
		try {
			Collection<BIDR> revicer = si.revicer();
			for(BIDR b:revicer){
				System.out.println(b.getAAA_login_name());
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}*/

	@Override
	public void shutdown() {
		
	}

}
class ServerThread extends Thread{
	Socket s=null;
	Collection<BIDR> bidr=null;
	
	public ServerThread(Socket s){
		this.s=s;
	}
	
	@SuppressWarnings("unchecked")
	@Override
	public void run(){
		System.out.println(getName() + " accept client socket");
		try {
			InputStream in=s.getInputStream();
			ObjectInputStream ois=new ObjectInputStream(in);
			System.out.println(ois);
			bidr=(Collection<BIDR>)ois.readObject();
			DBStoreImpl dbStoreImpl = new DBStoreImpl();
			
			dbStoreImpl.saveToDB(bidr);
		} catch (Exception e) {
			e.printStackTrace();
		}
		
	}
	
}



