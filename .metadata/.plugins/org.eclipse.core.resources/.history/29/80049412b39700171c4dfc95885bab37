package com.briup.main;

import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.junit.Test;

import com.briup.util.BIDR;

public class Test1 {
	List<BIDR> bidrList = new ArrayList<BIDR>();
	Map<String, BIDR> map = new HashMap<>();
	String[] split = null;

	/*
	 * 测试是否解析出用户
	 */
	@Test
	public void Test4() {
		int count1 = 0;
		try {
			FileReader reader = new FileReader("src/com/briup/file/radwtmp");
			BufferedReader br = new BufferedReader(reader);
			String bs = null;
			while ((bs = br.readLine()) != null) {
				//System.out.println(bs);
				String[] s=bs.split("#");
				split = s[1].split("[|]");
				/*for (String s : split) {
					System.out.print("  " + s);
				}*/
				//System.out.println();
				String loginName = split[0];// 登录名
				String nasIp = split[1];// NAS_ip
				String flag = split[2];// 七上八下
				String time = split[3];// 时间
				String IP = split[4];// IP
					if (flag.equals("7")) {
						BIDR bidr = new BIDR();
						Timestamp timeLogin = new Timestamp(
								Long.parseLong(time));
						//System.out.println(timeLogin);
						bidr.setAAA_login_name(loginName);
						bidr.setNAS_ip(nasIp);
						bidr.setLogin_date(timeLogin);
						bidr.setLogin_ip(IP);
						/*System.out.println(bidr.getAAA_login_name() + "  "
								+ bidr.getLogin_ip() + "  " + bidr.getNAS_ip()
								+ "  " + bidr.getLogin_date());*/
						//System.out.println("===========================");
						if (!map.containsKey(IP)) {
							map.put(IP, bidr);
						}
					} else if (flag.equals("8")) {
						
						BIDR bidr = map.get(IP);
						//System.out.println("[[[[[[[[[[[[[[[[[[[[[[[[[[[[");
						//System.out.println(bidr.getAAA_login_name());
						// map.remove(bidr);
						Timestamp login_date = bidr.getLogin_date();
						//System.out.println(login_date);
						Timestamp timeLogout = new Timestamp(Long.valueOf(time));
						// 获取上线时长
						int time_deration = (int) (timeLogout.getTime() - login_date
								.getTime());
						bidr.setTime_deration(time_deration);
						bidr.setLogout_date(timeLogout);
						bidrList.add(bidr);
						map.remove(bidr);
					}
				
			}
			for (BIDR d : bidrList) {
				//System.out.println("++++++++++++++++++++++++++");
				System.out.println(d.getAAA_login_name() + "  "
						+ d.getLogin_ip() + "  " + d.getNAS_ip() + "  "
						+ d.getTime_deration() + "  " + d.getLogin_date()
						+ "  " + d.getLogout_date() + "  " + ++count1);
			}
			for(String s:map.keySet()){
				BIDR b=map.get(s);
				System.out.println(b.getAAA_login_name() + "  "
								+ b.getLogin_ip() + "  " + b.getNAS_ip()
								+ "  " + b.getLogin_date() + "  " + s );
			}
			System.out.println(map.size());
		} catch (Exception e) {
			e.printStackTrace();
		}

	}

	@Test
	public void tsteetsctacsjacj(){

		try {
			FileReader reader = new FileReader("src/com/briup/file/radwtmp");
			//System.out.println("4");
			BufferedReader br = new BufferedReader(reader);
			String bs=null;
			while ((bs = br.readLine()) != null) {
				String[] split = bs.split("[|]");
				// 获取登录用户名
				String login_name = split[0];
				// 获取服务器ip
				String nas_ip = split[1];
				// 获取上线或下线
				String sign = split[2];
				// 获取上线或下线时间
				String time = split[3];
				// 获取用户ip
				String login_ip = split[4];

				// 判断是上线或者下线

				// 获取上线信息
				if (sign.equals("7")) {
					// 创建BIDR对象接收上线信息
					BIDR bidr = new BIDR();
					// 接收上线用户的用户名
					bidr.setAAA_login_name(login_name);
					// 接收上线的服务器ip
					bidr.setNAS_ip(nas_ip);
					// 接收上线的时间信息
					Timestamp login_time = new Timestamp(Long.parseLong(time));
					bidr.setLogin_date(login_time);
					// 接收上线用户的ip
					bidr.setLogin_ip(login_ip);

					if (!map.containsKey(login_ip)) {
						map.put(login_ip, bidr);
					}
				}
				if (sign.equals("8")) {
					//System.out.println("3");
					BIDR bidr = map.get(login_ip);
					// 获取上线时间
					Timestamp login_date = bidr.getLogin_date();
					Timestamp logout_time = new Timestamp(Long.parseLong(time));
					//获取上线下线时间差
					int time_deration = (int) (logout_time.getTime()-login_date.getTime());
					bidr.setTime_deration(time_deration);
					//System.out.println("1");
					bidrList.add(bidr);
					//System.out.println("2");
					map.remove(login_ip);
				}

			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		for (BIDR aaa : bidrList) {
			System.out.println(aaa.getAAA_login_name());
		}
	System.out.println(bidrList.size());
	}

}
